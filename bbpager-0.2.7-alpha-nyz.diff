diff -urN bbpager-0.2.7-alpha/BaseDisplay.cc bbpager-0.2.7-alpha-nyz/BaseDisplay.cc
--- bbpager-0.2.7-alpha/BaseDisplay.cc	Tue Dec  7 13:44:23 1999
+++ bbpager-0.2.7-alpha-nyz/BaseDisplay.cc	Sun May  7 23:57:23 2000
@@ -1,5 +1,5 @@
 // BaseDisplay.cc for Blackbox - an X11 Window manager
-// Copyright (c) 1997 - 1999 Brad Hughes (bhughes@tcac.net)
+// Copyright (c) 1997 - 2000 Brad Hughes (bhughes@tcac.net)
 //
 // Permission is hereby granted, free of charge, to any person obtaining a
 // copy of this software and associated documentation files (the "Software"),
@@ -43,8 +43,12 @@
 #include "LinkedList.hh"
 #include "Timer.hh"
 
+#ifdef    DEBUG
+#  include "mem.h"
+#endif // DEBUG
+
 #ifdef    HAVE_FCNTL_H
-#  include <fcntl.h>  
+#  include <fcntl.h>
 #endif // HAVE_FCNTL_H
 
 #ifdef    HAVE_STDIO_H
@@ -54,7 +58,7 @@
 #ifdef    STDC_HEADERS
 #  include <stdlib.h>
 #  include <string.h>
-#endif // STDC_HEADERS 
+#endif // STDC_HEADERS
 
 #ifdef    HAVE_UNISTD_H
 #  include <sys/types.h>
@@ -66,11 +70,11 @@
 #endif // HAVE_SYS_SELECT_H
 
 #ifdef    HAVE_SIGNAL_H
-#  include <signal.h>  
+#  include <signal.h>
 #endif // HAVE_SIGNAL_H
 
 #ifdef    HAVE_SYS_SIGNAL_H
-#  include <sys/signal.h>
+// #  include <sys/signal.h>
 #endif // HAVE_SYS_SIGNAL_H
 
 #ifndef   SA_NODEFER
@@ -90,16 +94,24 @@
 // X error handler to handle any and all X errors while the application is
 // running
 static Bool internal_error = False;
-BaseDisplay *base_display;
+static Window last_bad_window = None;
 
+BaseDisplay *base_display;
+  
+#ifdef    DEBUG
 static int handleXErrors(Display *d, XErrorEvent *e) {
   char errtxt[128];
+
   XGetErrorText(d, e->error_code, errtxt, 128);
   fprintf(stderr, "%s:  X error: %s(%d) opcodes %d/%d\n"
-                  "  resource 0x%lx\n",
+	  "  resource 0x%lx\n",
           base_display->getApplicationName(), errtxt, e->error_code,
           e->request_code, e->minor_code, e->resourceid);
-
+#else // !DEBUG
+static int handleXErrors(Display *, XErrorEvent *e) {
+#endif // DEBUG
+  
+  if (e->error_code == BadWindow) last_bad_window = e->resourceid;
   if (internal_error) abort();
 
   return(False);
@@ -163,33 +175,40 @@
 
 
 BaseDisplay::BaseDisplay(char *app_name, char *dpy_name) {
+#ifdef    DEBUG
+  allocate(sizeof(BaseDisplay), "BaseDisplay.cc");
+#endif // DEBUG
+
   application_name = app_name;
 
   _startup = True;
   _shutdown = False;
   server_grabs = 0;
+  last_bad_window = None;
 
   ::base_display = this;
 
 #ifdef    HAVE_SIGACTION
   struct sigaction action;
 
-  action.sa_handler = signalhandler;    
+  action.sa_handler = signalhandler;
   action.sa_mask = sigset_t();
   action.sa_flags = SA_NOCLDSTOP | SA_NODEFER;
-    
+
   sigaction(SIGSEGV, &action, NULL);
   sigaction(SIGFPE, &action, NULL);
   sigaction(SIGTERM, &action, NULL);
   sigaction(SIGINT, &action, NULL);
   sigaction(SIGCHLD, &action, NULL);
   sigaction(SIGHUP, &action, NULL);
+  sigaction(SIGUSR1, &action, NULL);
   sigaction(SIGUSR2, &action, NULL);
 #else // !HAVE_SIGACTION
   signal(SIGSEGV, (RETSIGTYPE (*)(int)) signalhandler);
   signal(SIGFPE, (RETSIGTYPE (*)(int)) signalhandler);
   signal(SIGTERM, (RETSIGTYPE (*)(int)) signalhandler);
   signal(SIGINT, (RETSIGTYPE (*)(int)) signalhandler);
+  signal(SIGUSR1, (RETSIGTYPE (*)(int)) signalhandler);
   signal(SIGUSR2, (RETSIGTYPE (*)(int)) signalhandler);
   signal(SIGHUP, (RETSIGTYPE (*)(int)) signalhandler);
   signal(SIGCHLD, (RETSIGTYPE (*)(int)) signalhandler);
@@ -215,7 +234,7 @@
 #else // !SHAPE
   shape.extensions = False;
 #endif // SHAPE
-  
+
   xa_wm_colormap_windows =
     XInternAtom(display, "WM_COLORMAP_WINDOWS", False);
   xa_wm_protocols = XInternAtom(display, "WM_PROTOCOLS", False);
@@ -224,32 +243,69 @@
   xa_wm_delete_window = XInternAtom(display, "WM_DELETE_WINDOW", False);
   xa_wm_take_focus = XInternAtom(display, "WM_TAKE_FOCUS", False);
   motif_wm_hints = XInternAtom(display, "_MOTIF_WM_HINTS", False);
+  
+  blackbox_hints = XInternAtom(display, "_BLACKBOX_HINTS", False);
+  blackbox_attributes = XInternAtom(display, "_BLACKBOX_ATTRIBUTES", False);
+  blackbox_change_attributes =
+    XInternAtom(display, "_BLACKBOX_CHANGE_ATTRIBUTES", False);
+
+  blackbox_structure_messages =
+    XInternAtom(display, "_BLACKBOX_STRUCTURE_MESSAGES", False);
+  blackbox_notify_startup =
+    XInternAtom(display, "_BLACKBOX_NOTIFY_STARTUP", False);
+  blackbox_notify_window_add =
+    XInternAtom(display, "_BLACKBOX_NOTIFY_WINDOW_ADD", False);
+  blackbox_notify_window_del =
+    XInternAtom(display, "_BLACKBOX_NOTIFY_WINDOW_DEL", False);
+  blackbox_notify_current_workspace =
+    XInternAtom(display, "_BLACKBOX_NOTIFY_CURRENT_WORKSPACE", False);
+  blackbox_notify_workspace_count =
+    XInternAtom(display, "_BLACKBOX_NOTIFY_WORKSPACE_COUNT", False);
+  blackbox_notify_window_focus =
+    XInternAtom(display, "_BLACKBOX_NOTIFY_WINDOW_FOCUS", False);
+  blackbox_notify_window_raise =
+    XInternAtom(display, "_BLACKBOX_NOTIFY_WINDOW_RAISE", False);
+  blackbox_notify_window_lower =
+    XInternAtom(display, "_BLACKBOX_NOTIFY_WINDOW_LOWER", False);
+
+  blackbox_change_workspace= XInternAtom(display, "_BLACKBOX_CHANGE_WORKSPACE", False);
+  blackbox_change_window_focus =
+    XInternAtom(display, "_BLACKBOX_CHANGE_WINDOW_FOCUS", False);
+  blackbox_cycle_window_focus =
+    XInternAtom(display, "_BLACKBOX_CYCLE_WINDOW_FOCUS", False);
 
-  net_hints = XInternAtom(display, "_NET_HINTS", False);
-  net_attributes = XInternAtom(display, "_NET_ATTRIBUTES", False);
-  net_change_attributes =
-    XInternAtom(display, "_NET_CHANGE_ATTRIBUTES", False);
-
-  net_structure_messages =
-    XInternAtom(display, "_NET_STRUCTURE_MESSAGES", False);
-  net_notify_startup =
-    XInternAtom(display, "_NET_NOTIFY_STARTUP", False);
-  net_notify_window_add =
-    XInternAtom(display, "_NET_NOTIFY_WINDOW_ADD", False);
-  net_notify_window_del =
-    XInternAtom(display, "_NET_NOTIFY_WINDOW_DEL", False);
-  net_notify_current_workspace =
-    XInternAtom(display, "_NET_NOTIFY_CURRENT_WORKSPACE", False);
-  net_notify_workspace_count =
-    XInternAtom(display, "_NET_NOTIFY_WORKSPACE_COUNT", False);
-  net_notify_window_focus =
-    XInternAtom(display, "_NET_NOTIFY_WINDOW_FOCUS", False);
-
-  net_change_workspace= XInternAtom(display, "_NET_CHANGE_WORKSPACE", False);
-  net_change_window_focus =
-    XInternAtom(display, "_NET_CHANGE_WINDOW_FOCUS", False);
-  net_cycle_window_focus =
-    XInternAtom(display, "_NET_CYCLE_WINDOW_FOCUS", False); 
+#ifdef    NEWWMSPEC
+  
+  net_supported = XInternAtom(display, "_NET_SUPPORTED", False);
+  net_client_list = XInternAtom(display, "_NET_CLIENT_LIST", False);
+  net_client_list_stacking = XInternAtom(display, "_NET_CLIENT_LIST_STACKING", False);
+  net_number_of_desktops = XInternAtom(display, "_NET_NUMBER_OF_DESKTOPS", False);
+  net_desktop_geometry = XInternAtom(display, "_NET_DESKTOP_GEOMETRY", False);
+  net_desktop_viewport = XInternAtom(display, "_NET_DESKTOP_VIEWPORT", False);
+  net_current_desktop = XInternAtom(display, "_NET_CURRENT_DESKTOP", False);
+  net_desktop_names = XInternAtom(display, "_NET_DESKTOP_NAMES", False);
+  net_active_window = XInternAtom(display, "_NET_ACTIVE_WINDOW", False);
+  net_workarea = XInternAtom(display, "_NET_WORKAREA", False);
+  net_supporting_wm_check = XInternAtom(display, "_NET_SUPPORTING_WM_CHECK", False);
+  net_virtual_roots = XInternAtom(display, "_NET_VIRTUAL_ROOTS", False);
+  
+  net_close_window = XInternAtom(display, "_NET_CLOSE_WINDOW", False);
+  net_wm_moveresize = XInternAtom(display, "_NET_WM_MOVERESIZE", False);
+  
+  net_properties = XInternAtom(display, "_NET_PROPERTIES", False);
+  net_wm_name = XInternAtom(display, "_NET_WM_NAME", False);
+  net_wm_desktop = XInternAtom(display, "_NET_WM_DESKTOP", False);
+  net_wm_window_type = XInternAtom(display, "_NET_WM_WINDOW_TYPE", False);
+  net_wm_state = XInternAtom(display, "_NET_WM_STATE", False);
+  net_wm_strut = XInternAtom(display, "_NET_WM_STRUT", False);
+  net_wm_icon_geometry = XInternAtom(display, "_NET_WM_ICON_GEOMETRY", False);
+  net_wm_icon = XInternAtom(display, "_NET_WM_ICON", False);
+  net_wm_pid = XInternAtom(display, "_NET_WM_PID", False);
+  net_wm_handled_icons = XInternAtom(display, "_NET_WM_HANDLED_ICONS", False);
+    
+  net_wm_ping = XInternAtom(display, "_NET_WM_PING", False);
+  
+#endif // NEWWMSPEC
   
   cursor.session = XCreateFontCursor(display, XC_left_ptr);
   cursor.move = XCreateFontCursor(display, XC_fleur);
@@ -270,13 +326,23 @@
 
 
 BaseDisplay::~BaseDisplay(void) {
-  while (screenInfoList->count())
-    delete screenInfoList->remove(0);
+#ifdef    DEBUG
+  deallocate(sizeof(BaseDisplay), "BaseDisplay.cc");
+#endif // DEBUG
+
+  while (screenInfoList->count()) {
+    ScreenInfo *si = screenInfoList->first();
+
+    screenInfoList->remove(si);
+    delete si;
+  }
+
   delete screenInfoList;
 
   // we don't create the BTimers, we don't delete them
   while (timerList->count())
     timerList->remove(0);
+
   delete timerList;
 
   XCloseDisplay(display);
@@ -292,7 +358,16 @@
     if (XPending(display)) {
       XEvent e;
       XNextEvent(display, &e);
-      process_event(&e);
+
+      if (last_bad_window != None && e.xany.window == last_bad_window) {
+#ifdef    DEBUG
+      fprintf(stderr, "BaseDisplay::eventLoop(): "
+              "removing bad window from event queue\n");
+#endif // DEBUG
+      } else {
+        last_bad_window = None;
+        process_event(&e);
+      }
     } else {
       fd_set rfds;
       timeval now, tm, *timeout = (timeval *) 0;
@@ -347,7 +422,7 @@
           break;
 
         it.current()->fireTimeout();
-  
+
         // restart the current timer so that the start time is updated
         if (! it.current()->doOnce()) it.current()->start();
         else it.current()->stop();
@@ -357,13 +432,13 @@
 }
 
 
-Bool BaseDisplay::validateWindow(Window window) {  
+const Bool BaseDisplay::validateWindow(Window window) {
   XEvent event;
   if (XCheckTypedWindowEvent(display, window, DestroyNotify, &event)) {
     XPutBackEvent(display, &event);
 
     return False;
-  } 
+  }
 
   return True;
 }
@@ -372,8 +447,6 @@
 void BaseDisplay::grab(void) {
   if (! server_grabs++)
     XGrabServer(display);
-
-  XSync(display, False);
 }
 
 
@@ -406,16 +479,52 @@
 
 
 ScreenInfo::ScreenInfo(BaseDisplay *d, int num) {
+#ifdef    DEBUG
+  allocate(sizeof(ScreenInfo), "BaseDisplay.cc");
+#endif // DEBUG
+
   basedisplay = d;
   screen_number = num;
 
   root_window = RootWindow(basedisplay->getXDisplay(), screen_number);
-  visual = DefaultVisual(basedisplay->getXDisplay(), screen_number);
   depth = DefaultDepth(basedisplay->getXDisplay(), screen_number);
 
   width =
     WidthOfScreen(ScreenOfDisplay(basedisplay->getXDisplay(), screen_number));
   height =
     HeightOfScreen(ScreenOfDisplay(basedisplay->getXDisplay(), screen_number));
+
+  // search for a TrueColor Visual... if we can't find one... we will use the
+  // default visual for the screen
+  XVisualInfo vinfo_template, *vinfo_return;
+  int vinfo_nitems;
+
+  vinfo_template.screen = screen_number;
+  vinfo_template.c_class = TrueColor;
+
+  visual = (Visual *) 0;
+
+  if ((vinfo_return = XGetVisualInfo(basedisplay->getXDisplay(),
+                                     VisualScreenMask | VisualClassMask,
+                                     &vinfo_template, &vinfo_nitems)) &&
+      vinfo_nitems > 0) {
+    for (int i = 0; i < vinfo_nitems; i++) {
+      if (depth < (vinfo_return + i)->depth) {
+        depth = (vinfo_return + i)->depth;
+        visual = (vinfo_return + i)->visual;
+      }
+    }
+
+    XFree(vinfo_return);
+  }
+
+  if (! visual)
+    visual = DefaultVisual(basedisplay->getXDisplay(), screen_number);
 }
 
+
+#ifdef    DEBUG
+ScreenInfo::~ScreenInfo(void) {
+  deallocate(sizeof(ScreenInfo), "BaseDisplay.cc");
+}
+#endif // DEBUG
diff -urN bbpager-0.2.7-alpha/BaseDisplay.hh bbpager-0.2.7-alpha-nyz/BaseDisplay.hh
--- bbpager-0.2.7-alpha/BaseDisplay.hh	Tue Dec  7 13:44:23 1999
+++ bbpager-0.2.7-alpha-nyz/BaseDisplay.hh	Mon May  8 00:00:12 2000
@@ -1,24 +1,24 @@
 // BaseDisplay.hh for Blackbox - an X11 Window manager
-// Copyright (c) 1997 - 1999 Brad Hughes (bhughes@tcac.net)
+// Copyright (c) 1997 - 2000 Brad Hughes (bhughes@tcac.net)
 //
 // Permission is hereby granted, free of charge, to any person obtaining a
 // copy of this software and associated documentation files (the "Software"),
 // to deal in the Software without restriction, including without limitation
 // the rights to use, copy, modify, merge, publish, distribute, sublicense,
-// and/or sell copies of the Software, and to permit persons to whom the 
+// and/or sell copies of the Software, and to permit persons to whom the
 // Software is furnished to do so, subject to the following conditions:
 //
-// The above copyright notice and this permission notice shall be included in 
-// all copies or substantial portions of the Software. 
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
 //
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL 
-// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
-// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 // DEALINGS IN THE SOFTWARE.
-  
+
 #ifndef   __BaseDisplay_hh
 #define   __BaseDisplay_hh
 
@@ -29,38 +29,45 @@
 class BaseDisplay;
 class ScreenInfo;
 
-#include "LinkedList.hh"     
+#include "LinkedList.hh"
 #include "Timer.hh"
 
-#define NETAttribShaded      (1l << 0)
-#define NETAttribMaxHoriz    (1l << 1)
-#define NETAttribMaxVert     (1l << 2)
-#define NETAttribOmnipresent (1l << 3)
-#define NETAttribWorkspace   (1l << 4)
-#define NETAttribStack       (1l << 5)
-#define NETAttribDecoration  (1l << 6)
-
-#define NETStackTop          (0)
-#define NETStackNormal       (1)
-#define NETStackBottom       (2)
-
-#define NETDecorNone         (0)
-#define NETDecorNormal	     (1)
-#define NETDecorTiny         (2)
-#define NETDecorTool         (3)
+#define AttribShaded      (1l << 0)
+#define AttribMaxHoriz    (1l << 1)
+#define AttribMaxVert     (1l << 2)
+#define AttribOmnipresent (1l << 3)
+#define AttribWorkspace   (1l << 4)
+#define AttribStack       (1l << 5)
+#define AttribDecoration  (1l << 6)
+
+#define StackTop          (0)
+#define StackNormal       (1)
+#define StackBottom       (2)
+
+#define DecorNone         (0)
+#define DecorNormal       (1)
+#define DecorTiny         (2)
+#define DecorTool         (3)
 
-typedef struct _net_hints {
+typedef struct _blackbox_hints {
   unsigned long flags, attrib, workspace, stack, decoration;
-} NetHints;
+} BlackboxHints;
 
-typedef struct _net_attributes {
+typedef struct _blackbox_attributes {
   unsigned long flags, attrib, workspace, stack;
   int premax_x, premax_y;
   unsigned int premax_w, premax_h;
-} NetAttributes;
+} Decorutes;
+
+#define PropBlackboxHintsElements      (5)
+#define PropDecorutesElements (8)
+
+#ifdef    NEWWMSPEC
 
-#define PropNetHintsElements	(5)
-#define PropNetAttributesElements (8)
+
+
+
+#endif // NEWWMSPEC
 
 
 class BaseDisplay {
@@ -77,23 +84,44 @@
   Atom xa_wm_colormap_windows, xa_wm_protocols, xa_wm_state,
     xa_wm_delete_window, xa_wm_take_focus, xa_wm_change_state,
     motif_wm_hints;
-
+    
   // NETAttributes
-  Atom net_attributes, net_change_attributes, net_hints;
+  Atom blackbox_attributes, blackbox_change_attributes, blackbox_hints;
 
   // NETStructureMessages
-  Atom net_structure_messages, net_notify_startup,
-    net_notify_window_add, net_notify_window_del,
-    net_notify_window_focus, net_notify_current_workspace,
-    net_notify_workspace_count;
+  Atom blackbox_structure_messages, blackbox_notify_startup,
+    blackbox_notify_window_add, blackbox_notify_window_del,
+    blackbox_notify_window_focus, blackbox_notify_current_workspace,
+    blackbox_notify_workspace_count, blackbox_notify_window_raise,
+    blackbox_notify_window_lower;
 
   // message_types for client -> wm messages
-  Atom net_change_workspace, net_change_window_focus,
-    net_cycle_window_focus;
-
+  Atom blackbox_change_workspace, blackbox_change_window_focus,
+    blackbox_cycle_window_focus;
+  
+#ifdef    NEWWMSPEC
+  
+  // root window properties
+  Atom net_supported, net_client_list, net_client_list_stacking,
+    net_number_of_desktops, net_desktop_geometry, net_desktop_viewport,
+    net_current_desktop, net_desktop_names, net_active_window, net_workarea,
+    net_supporting_wm_check, net_virtual_roots;
+  
+  // root window messages
+  Atom net_close_window, net_wm_moveresize;
+  
+  // application window properties
+  Atom net_properties, net_wm_name, net_wm_desktop, net_wm_window_type,
+    net_wm_state, net_wm_strut, net_wm_icon_geometry, net_wm_icon, net_wm_pid,
+    net_wm_handled_icons;
+  
+  // application protocols
+  Atom net_wm_ping;
+    
+#endif // NEWWMSPEC
+  
   Bool _startup, _shutdown;
   Display *display;
-
   LinkedList<ScreenInfo> *screenInfoList;
   LinkedList<BTimer> *timerList;
 
@@ -110,62 +138,163 @@
   BaseDisplay(char *, char * = 0);
   virtual ~BaseDisplay(void);
 
-  inline Atom getWMChangeStateAtom(void) { return xa_wm_change_state; }
-  inline Atom getWMStateAtom(void) { return xa_wm_state; }
-  inline Atom getWMDeleteAtom(void) { return xa_wm_delete_window; }
-  inline Atom getWMProtocolsAtom(void) { return xa_wm_protocols; }
-  inline Atom getWMFocusAtom(void) { return xa_wm_take_focus; }
-  inline Atom getWMColormapAtom(void) { return xa_wm_colormap_windows; }
-  inline Atom getMotifWMHintsAtom(void) { return motif_wm_hints; }
-
+  inline const Atom &getWMChangeStateAtom(void) const
+    { return xa_wm_change_state; }
+  inline const Atom &getWMStateAtom(void) const
+    { return xa_wm_state; }
+  inline const Atom &getWMDeleteAtom(void) const
+    { return xa_wm_delete_window; }
+  inline const Atom &getWMProtocolsAtom(void) const
+    { return xa_wm_protocols; }
+  inline const Atom &getWMTakeFocusAtom(void) const
+    { return xa_wm_take_focus; }
+  inline const Atom &getWMColormapAtom(void) const
+    { return xa_wm_colormap_windows; }
+  inline const Atom &getMotifWMHintsAtom(void) const
+    { return motif_wm_hints; }
+  
   // this atom is for normal app->WM hints about decorations, stacking,
   // starting workspace etc...
-  inline Atom getNETHintsAtom(void) { return net_hints;}
+  inline const Atom &getBlackboxHintsAtom(void) const
+    { return blackbox_hints;}
 
   // these atoms are for normal app->WM interaction beyond the scope of the
   // ICCCM...
-  inline Atom getNETAttributesAtom(void) { return net_attributes; }
-  inline Atom getNETChangeAttributesAtom(void)
-    { return net_change_attributes; }
-  
+  inline const Atom &getBlackboxAttributesAtom(void) const
+    { return blackbox_attributes; }
+  inline const Atom &getBlackboxChangeAttributesAtom(void) const
+    { return blackbox_change_attributes; }
+
   // these atoms are for window->WM interaction, with more control and
   // information on window "structure"... common examples are
   // notifying apps when windows are raised/lowered... when the user changes
   // workspaces... i.e. "pager talk"
-  inline Atom getNETStructureMessagesAtom(void)
-    { return net_structure_messages; }
+  inline const Atom &getBlackboxStructureMessagesAtom(void) const
+    { return blackbox_structure_messages; }
 
   // *Notify* portions of the NETStructureMessages protocol
-  inline Atom getNETNotifyStartupAtom(void) { return net_notify_startup; }
-  inline Atom getNETNotifyWindowAddAtom(void) { return net_notify_window_add; }
-  inline Atom getNETNotifyWindowDelAtom(void) { return net_notify_window_del; }
-  inline Atom getNETNotifyWindowFocusAtom(void)
-    { return net_notify_window_focus; }
-  inline Atom getNETNotifyCurrentWorkspaceAtom(void)
-    { return net_notify_current_workspace; }
-  inline Atom getNETNotifyWorkspaceCountAtom(void)
-    { return net_notify_workspace_count; }
+  inline const Atom &getBlackboxNotifyStartupAtom(void) const
+    { return blackbox_notify_startup; }
+  inline const Atom &getBlackboxNotifyWindowAddAtom(void) const
+    { return blackbox_notify_window_add; }
+  inline const Atom &getBlackboxNotifyWindowDelAtom(void) const
+    { return blackbox_notify_window_del; }
+  inline const Atom &getBlackboxNotifyWindowFocusAtom(void) const
+    { return blackbox_notify_window_focus; }
+  inline const Atom &getBlackboxNotifyCurrentWorkspaceAtom(void) const
+    { return blackbox_notify_current_workspace; }
+  inline const Atom &getBlackboxNotifyWorkspaceCountAtom(void) const
+    { return blackbox_notify_workspace_count; }
+  inline const Atom &getBlackboxNotifyWindowRaiseAtom(void) const
+    { return blackbox_notify_window_raise; }
+  inline const Atom &getBlackboxNotifyWindowLowerAtom(void) const
+    { return blackbox_notify_window_lower; }
 
   // atoms to change that request changes to the desktop environment during
   // runtime... these messages can be sent by any client... as the sending
   // client window id is not included in the ClientMessage event...
-  inline Atom getNETChangeWorkspaceAtom(void) { return net_change_workspace; }
-  inline Atom getNETChangeWindowFocusAtom(void)
-    { return net_change_window_focus; }
-  inline Atom getNETCycleWindowFocusAtom(void)
-    { return net_cycle_window_focus; }
-
+  inline const Atom &getBlackboxChangeWorkspaceAtom(void) const
+    { return blackbox_change_workspace; }
+  inline const Atom &getBlackboxChangeWindowFocusAtom(void) const
+    { return blackbox_change_window_focus; }
+  inline const Atom &getBlackboxCycleWindowFocusAtom(void) const
+    { return blackbox_cycle_window_focus; }
+  
+#ifdef    NEWWMSPEC
+  
+  // root window properties
+  inline const Atom &getNETSupportedAtom(void) const
+    { return net_supported; }
+  inline const Atom &getNETClientListAtom(void) const
+    { return net_client_list; }
+  inline const Atom &getNETClientListStackingAtom(void) const
+    { return net_client_list_stacking; }
+  inline const Atom &getNETNumberOfDesktopsAtom(void) const
+    { return net_number_of_desktops; }
+  inline const Atom &getNETDesktopGeometryAtom(void) const
+    { return net_desktop_geometry; }
+  inline const Atom &getNETDesktopViewportAtom(void) const
+    { return net_desktop_viewport; }
+  inline const Atom &getNETCurrentDesktopAtom(void) const
+    { return net_current_desktop; }
+  inline const Atom &getNETDesktopNamesAtom(void) const
+    { return net_desktop_names; }
+  inline const Atom &getNETActiveWindowAtom(void) const
+    { return net_active_window; }
+  inline const Atom &getNETWorkareaAtom(void) const
+    { return net_workarea; }
+  inline const Atom &getNETSupportingWMCheckAtom(void) const
+    { return net_supporting_wm_check; }
+  inline const Atom &getNETVirtualRootsAtom(void) const
+    { return net_virtual_roots; }
+  
+  // root window messages
+  inline const Atom &getNETCloseWindowAtom(void) const
+    { return net_close_window; }
+  inline const Atom &getNETWMMoveResizeAtom(void) const
+    { return net_wm_moveresize; }
+  
+  // application window properties
+  inline const Atom &getNETPropertiesAtom(void) const
+    { return net_properties; }
+  inline const Atom &getNETWMNameAtom(void) const
+    { return net_wm_name; }
+  inline const Atom &getNETWMDesktopAtom(void) const
+    { return net_wm_desktop; }
+  inline const Atom &getNETWMWindowTypeAtom(void) const
+    { return net_wm_window_type; }
+  inline const Atom &getNETWMStateAtom(void) const
+    { return net_wm_state; }
+  inline const Atom &getNETWMStrutAtom(void) const
+    { return net_wm_strut; }
+  inline const Atom &getNETWMIconGeometryAtom(void) const
+    { return net_wm_icon_geometry; }
+  inline const Atom &getNETWMIconAtom(void) const
+    { return net_wm_icon; }
+  inline const Atom &getNETWMPidAtom(void) const
+    { return net_wm_pid; }
+  inline const Atom &getNETWMHandledIconsAtom(void) const
+    { return net_wm_handled_icons; }
+  
+  // application protocols
+  inline const Atom &getNETWMPingAtom(void) const
+    { return net_wm_ping; }
+
+  /*
+    inline const Atom &getNET(void) const
+    { return net_; }
+    inline const Atom &getNET(void) const
+    { return net_; }
+    inline const Atom &getNET(void) const
+    { return net_; }
+    inline const Atom &getNET(void) const
+    { return net_; }
+    inline const Atom &getNET(void) const
+    { return net_; }
+    inline const Atom &getNET(void) const
+    { return net_; }
+  */
+  
+#endif // NEWWMSPEC
+  
   inline ScreenInfo *getScreenInfo(int s)
     { return (ScreenInfo *) screenInfoList->find(s); }
 
-  inline Bool hasShapeExtensions(void) { return shape.extensions; }
-  inline Bool doShutdown(void) { return _shutdown; }
-  inline Bool isStartup(void) { return _startup; }
-
-  inline Cursor getSessionCursor(void) { return cursor.session; }
-  inline Cursor getMoveCursor(void) { return cursor.move; }
-  inline Cursor getLowerLeftAngleCursor(void) { return cursor.ll_angle; }
-  inline Cursor getLowerRightAngleCursor(void) { return cursor.lr_angle; }
+  inline const Bool &hasShapeExtensions(void) const
+    { return shape.extensions; }
+  inline const Bool &doShutdown(void) const
+    { return _shutdown; }
+  inline const Bool &isStartup(void) const
+    { return _startup; }
+
+  inline const Cursor &getSessionCursor(void) const
+    { return cursor.session; }
+  inline const Cursor &getMoveCursor(void) const
+    { return cursor.move; }
+  inline const Cursor &getLowerLeftAngleCursor(void) const
+    { return cursor.ll_angle; }
+  inline const Cursor &getLowerRightAngleCursor(void) const
+    { return cursor.lr_angle; }
 
   inline Display *getXDisplay(void) { return display; }
 
@@ -174,15 +303,17 @@
   inline const char *getApplicationName(void) const
     { return (const char *) application_name; }
 
-  inline int getNumberOfScreens(void) { return number_of_screens; }
-  inline int getShapeEventBase(void) { return shape.event_basep; }
+  inline const int &getNumberOfScreens(void) const
+    { return number_of_screens; }
+  inline const int &getShapeEventBase(void) const
+    { return shape.event_basep; }
 
   inline void shutdown(void) { _shutdown = True; }
   inline void run(void) { _startup = _shutdown = False; }
 
-  Bool validateWindow(Window);
+  const Bool validateWindow(Window);
 
-  void grab(void);  
+  void grab(void);
   void ungrab(void);
   void eventLoop(void);
   void addTimer(BTimer *);
@@ -210,15 +341,19 @@
 public:
   ScreenInfo(BaseDisplay *, int);
 
+#ifdef    DEBUG
+  ~ScreenInfo(void);
+#endif // DEBUG
+
   inline BaseDisplay *getBaseDisplay(void) { return basedisplay; }
   inline Visual *getVisual(void) { return visual; }
-  inline Window getRootWindow(void) { return root_window; }
+  inline const Window &getRootWindow(void) const { return root_window; }
 
-  inline int getDepth(void) { return depth; }
-  inline int getScreenNumber(void) { return screen_number; }
+  inline const int &getDepth(void) const { return depth; }
+  inline const int &getScreenNumber(void) const { return screen_number; }
 
-  inline unsigned int getWidth(void) { return width; }
-  inline unsigned int getHeight(void) { return height; }
+  inline const unsigned int &getWidth(void) const { return width; }
+  inline const unsigned int &getHeight(void) const { return height; }
 };
 
 
diff -urN bbpager-0.2.7-alpha/NETInterface.cc bbpager-0.2.7-alpha-nyz/NETInterface.cc
--- bbpager-0.2.7-alpha/NETInterface.cc	Tue Dec  7 13:44:23 1999
+++ bbpager-0.2.7-alpha-nyz/NETInterface.cc	Mon May  8 00:15:01 2000
@@ -1,4 +1,4 @@
-//  NETInterface.cc for bbtools.
+//  BlackboxInterface.cc for bbtools.
 //
 //  Copyright (c) 1998-1999 by John Kennis, jkennis@chello.nl
 //
@@ -21,7 +21,7 @@
 
 #include "NETInterface.hh"
 
-NETInterface::NETInterface(Basewindow *basewindow) {
+BlackboxInterface::BlackboxInterface(Basewindow *basewindow) {
 
   timer=new BTimer(basewindow->getCurrentScreenInfo()->getBaseDisplay(),this) ;
   base=basewindow;
@@ -31,40 +31,48 @@
   timer->start();
 }
 
-void NETInterface::handleNETEvents(XEvent Event) {
-  if (Event.xclient.message_type==base->getNETStructureMessagesAtom()) {
-    if ((unsigned)Event.xclient.data.l[0]==base->getNETNotifyStartupAtom()) {
-      NETNotifyStartup();
+void BlackboxInterface::handleBlackboxEvents(XEvent Event) {
+  if (Event.xclient.message_type==base->getBlackboxStructureMessagesAtom()) {
+    if ((unsigned)Event.xclient.data.l[0]==base->getBlackboxNotifyStartupAtom()) {
+      BlackboxNotifyStartup();
       net_init=True;
     }
     else if ((unsigned)Event.xclient.data.l[0]==
-                                      base->getNETNotifyWindowAddAtom()) {
-      NETNotifyWindowAdd(Event.xclient.data.l[1],Event.xclient.data.l[2]);
+                                      base->getBlackboxNotifyWindowRaiseAtom()) {
+      BlackboxNotifyWindowRaise(Event.xclient.data.l[1]);
     }
     else if ((unsigned)Event.xclient.data.l[0]==
-                                      base->getNETNotifyWindowDelAtom()) {
-      NETNotifyDel(Event.xclient.data.l[1]);
+                                      base->getBlackboxNotifyWindowLowerAtom()) {
+      BlackboxNotifyWindowLower(Event.xclient.data.l[1]);
     }
     else if ((unsigned)Event.xclient.data.l[0]==
-                                      base->getNETAttributesAtom()) {
-      NETNotifyAttributes(Event.xclient.data.l[1]);
+                                      base->getBlackboxNotifyWindowAddAtom()) {
+      BlackboxNotifyWindowAdd(Event.xclient.data.l[1],Event.xclient.data.l[2]);
     }
     else if ((unsigned)Event.xclient.data.l[0]==
-                                      base->getNETNotifyWindowFocusAtom()){
-      NETNotifyFocus(Event.xclient.data.l[1]);
+                                      base->getBlackboxNotifyWindowDelAtom()) {
+      BlackboxNotifyDel(Event.xclient.data.l[1]);
+    }
+    else if ((unsigned)Event.xclient.data.l[0]==
+                                      base->getBlackboxAttributesAtom()) {
+      BlackboxNotifyAttributes(Event.xclient.data.l[1]);
+    }
+    else if ((unsigned)Event.xclient.data.l[0]==
+                                      base->getBlackboxNotifyWindowFocusAtom()){
+      BlackboxNotifyFocus(Event.xclient.data.l[1]);
     }
     if ((unsigned)Event.xclient.data.l[0]==
-                                   base->getNETNotifyCurrentWorkspaceAtom()){
-      NETNotifyCurrentWorkspace(Event.xclient.data.l[1]);
+                                   base->getBlackboxNotifyCurrentWorkspaceAtom()){
+      BlackboxNotifyCurrentWorkspace(Event.xclient.data.l[1]);
     }
     else if ((unsigned)Event.xclient.data.l[0]==
-                                    base->getNETNotifyWorkspaceCountAtom()) {
-      NETNotifyWorkspaceCount(Event.xclient.data.l[1]);
+                                    base->getBlackboxNotifyWorkspaceCountAtom()) {
+      BlackboxNotifyWorkspaceCount(Event.xclient.data.l[1]);
     }
   }
 }
 
-void NETInterface::timeout() {
+void BlackboxInterface::timeout() {
   if (!net_init) {
     fprintf(stderr,"Cannot connect to window manager\n");
     base->shutdown();
diff -urN bbpager-0.2.7-alpha/NETInterface.hh bbpager-0.2.7-alpha-nyz/NETInterface.hh
--- bbpager-0.2.7-alpha/NETInterface.hh	Tue Dec  7 13:44:23 1999
+++ bbpager-0.2.7-alpha-nyz/NETInterface.hh	Mon May  8 00:14:11 2000
@@ -1,4 +1,4 @@
-//  NETInterface.hh for bbtools.
+//  BlackboxInterface.hh for bbtools.
 //
 //  Copyright (c) 1998-1999 by John Kennis, jkennis@chello.nl
 //
@@ -19,8 +19,8 @@
 // (See the included file COPYING / GPL-2.0)
 //
 
-#ifndef __NETINTERFACE_HH
-#define __NETINTERFACE_HH
+#ifndef __BlackboxINTERFACE_HH
+#define __BlackboxINTERFACE_HH
 
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
@@ -33,20 +33,22 @@
 
 class Basewindow;
 
-class NETInterface : public TimeoutHandler {
+class BlackboxInterface : public TimeoutHandler {
   public:
-    NETInterface(Basewindow *);
-    virtual ~NETInterface(void) {};
-    void handleNETEvents(XEvent);
+    BlackboxInterface(Basewindow *);
+    virtual ~BlackboxInterface(void) {};
+    void handleBlackboxEvents(XEvent);
 
   protected:
-    virtual void NETNotifyStartup(void) {net_init=True;}
-    virtual void NETNotifyWindowAdd(Window,int)=0;
-    virtual void NETNotifyDel(Window)=0;
-    virtual void NETNotifyAttributes(Window)=0;
-    virtual void NETNotifyFocus(Window)=0;
-    virtual void NETNotifyCurrentWorkspace(int)=0;
-    virtual void NETNotifyWorkspaceCount(int)=0;
+    virtual void BlackboxNotifyStartup(void) {net_init=True;}
+    virtual void BlackboxNotifyWindowAdd(Window,int)=0;
+    virtual void BlackboxNotifyDel(Window)=0;
+    virtual void BlackboxNotifyAttributes(Window)=0;
+    virtual void BlackboxNotifyFocus(Window)=0;
+    virtual void BlackboxNotifyCurrentWorkspace(int)=0;
+    virtual void BlackboxNotifyWorkspaceCount(int)=0;
+    virtual void BlackboxNotifyWindowRaise(Window)=0;
+    virtual void BlackboxNotifyWindowLower(Window)=0;
     virtual void timeout(void);
 
   private:
@@ -56,4 +58,4 @@
 };
 
 
-#endif // __NETINTERFACE_HH
+#endif // __BlackboxINTERFACE_HH
diff -urN bbpager-0.2.7-alpha/bbpager.cc bbpager-0.2.7-alpha-nyz/bbpager.cc
--- bbpager-0.2.7-alpha/bbpager.cc	Tue Feb 15 09:14:40 2000
+++ bbpager-0.2.7-alpha-nyz/bbpager.cc	Sun May  7 23:58:06 2000
@@ -625,17 +625,17 @@
                   &sizehints,&wmhints,&classhints);
   Atom wmproto[2];
   wmproto[0]=wm_delete_window;
-  wmproto[1]=getNETStructureMessagesAtom();
+  wmproto[1]=getBlackboxStructureMessagesAtom();
   XSetWMProtocols(getXDisplay(), framewin,wmproto, 2);
 
   if (!decorated&&!withdrawn) {
-    NetHints net_hints;
-    net_hints.decoration=NETDecorNone;
-    net_hints.attrib= NETAttribOmnipresent;
-    net_hints.flags=NETAttribDecoration|NETAttribOmnipresent;
-    XChangeProperty(getXDisplay(), framewin, getNETHintsAtom(),
-                getNETHintsAtom(), 32, PropModeReplace,
-                (unsigned char *) &net_hints,  PropNetHintsElements);
+    BlackboxHints net_hints;
+    net_hints.decoration=DecorNone;
+    net_hints.attrib= AttribOmnipresent;
+    net_hints.flags=AttribDecoration|AttribOmnipresent;
+    XChangeProperty(getXDisplay(), framewin, getBlackboxHintsAtom(),
+                getBlackboxHintsAtom(), 32, PropModeReplace,
+                (unsigned char *) &net_hints,  PropBlackboxHintsElements);
   }
  
 
@@ -687,7 +687,7 @@
     break;
     case ClientMessage: {
       if ((unsigned)Event->xclient.data.l[0]==wm_delete_window) shutdown();
-        wminterface->handleNETEvents(*Event);
+        wminterface->handleBlackboxEvents(*Event);
     }
     break;
     case ButtonPress: {
diff -urN bbpager-0.2.7-alpha/bbpager.hh bbpager-0.2.7-alpha-nyz/bbpager.hh
--- bbpager-0.2.7-alpha/bbpager.hh	Tue Dec  7 13:44:23 1999
+++ bbpager-0.2.7-alpha-nyz/bbpager.hh	Sun May  7 23:57:23 2000
@@ -114,7 +114,7 @@
   int getNumberOfDesktops(void) { return number_of_desktops; }
   void setNumberOfDesktops(int n) { number_of_desktops=n; }
 
-  void setNETInit(void) { wm_init = True; }
+  void setBlackboxInit(void) { wm_init = True; }
   struct PIXMAP getPixmap(void) { return pixmap; }
   Resource *getResource(void) { return resource; }
 
diff -urN bbpager-0.2.7-alpha/wminterface.cc bbpager-0.2.7-alpha-nyz/wminterface.cc
--- bbpager-0.2.7-alpha/wminterface.cc	Tue Dec  7 13:44:23 1999
+++ bbpager-0.2.7-alpha-nyz/wminterface.cc	Mon May  8 00:17:06 2000
@@ -23,7 +23,7 @@
 #include "resource.hh"
 #include "BaseDisplay.hh"
 
-WMInterface::WMInterface(ToolWindow *toolwindow) : NETInterface(toolwindow) {
+WMInterface::WMInterface(ToolWindow *toolwindow) : BlackboxInterface(toolwindow) {
   bbtool=toolwindow;
 }
 
@@ -54,7 +54,7 @@
 void WMInterface::changeDesktop(int desk_number) {
   unsigned long int data=desk_number;
 
-  sendClientMessage(bbtool->getNETChangeWorkspaceAtom(),data);
+  sendClientMessage(bbtool->getBlackboxChangeWorkspaceAtom(),data);
 }
 
 
@@ -64,9 +64,9 @@
 
   e.xclient.type = ClientMessage;
   e.xclient.window = win;
-  e.xclient.message_type = bbtool->getNETChangeAttributesAtom();
+  e.xclient.message_type = bbtool->getBlackboxChangeAttributesAtom();
   e.xclient.format = 32;
-  e.xclient.data.l[0] = NETAttribWorkspace;
+  e.xclient.data.l[0] = AttribWorkspace;
   e.xclient.data.l[1] = 0;
   e.xclient.data.l[2] = desk_number;
   e.xclient.data.l[3] = 0; 
@@ -87,7 +87,7 @@
   e.xclient.type = ClientMessage;
   e.xclient.window =  win;
 
-  e.xclient.message_type = bbtool->getNETChangeWindowFocusAtom();
+  e.xclient.message_type = bbtool->getBlackboxChangeWindowFocusAtom();
   e.xclient.format = 32;
   e.xclient.data.l[0] = 0;
   e.xclient.data.l[1] = 0;
@@ -126,8 +126,8 @@
 
   
   status = XGetWindowProperty(bbtool->getXDisplay(), win, 
-                              bbtool->getNETAttributesAtom(), 0L, 1L,
-                              False, bbtool->getNETAttributesAtom(), 
+                              bbtool->getBlackboxAttributesAtom(), 0L, 1L,
+                              False, bbtool->getBlackboxAttributesAtom(), 
                               &real_type, &format,&n, &extra,  
                               (unsigned char**)&p);
   if (!status) {
@@ -233,7 +233,7 @@
   unsigned long n, extra;
   WindowList *tmp=0;
 
-  NetHints *net_hint;
+  BlackboxHints *net_hint;
 
   {
     LinkedListIterator<WindowList> win_it(bbtool->windowList);
@@ -245,17 +245,17 @@
   if (tmp) {
 
     if (XGetWindowProperty(bbtool->getXDisplay(), win, 
-                          bbtool->getNETAttributesAtom(), 0L, 
-                          PropNetHintsElements, False, 
-                          bbtool->getNETAttributesAtom(), 
+                          bbtool->getBlackboxAttributesAtom(), 0L, 
+                          PropBlackboxHintsElements, False, 
+                          bbtool->getBlackboxAttributesAtom(), 
                           &real_type, &format,&n, &extra,  
                           (unsigned char**)&net_hint) == Success && net_hint) {
 
   
-      if (n == PropNetHintsElements) {
+      if (n == PropBlackboxHintsElements) {
 
-        if (net_hint->flags & NETAttribShaded) {
-          if (net_hint->attrib & NETAttribShaded) {
+        if (net_hint->flags & AttribShaded) {
+          if (net_hint->attrib & AttribShaded) {
             tmp->pager_height=2;
             XResizeWindow(bbtool->getXDisplay(),tmp->pager_win,tmp->pager_width,
                         tmp->pager_height);
@@ -273,8 +273,8 @@
         if (isIconicState(win)!=tmp->icon&&!tmp->shaded)
           changeIconState(win);
         
-          if (net_hint->flags & NETAttribOmnipresent) {
-            if (net_hint->attrib & NETAttribOmnipresent) {
+          if (net_hint->flags & AttribOmnipresent) {
+            if (net_hint->attrib & AttribOmnipresent) {
               addSticky(tmp);
               tmp->sticky=True;
             }
@@ -284,10 +284,10 @@
           }
 
    
-//        if (net_hint->flags & NETAttribWorkspace)
+//        if (net_hint->flags & AttribWorkspace)
 //          tmp->setDesktopNr(net_hint->workspace);
 
-//        if (net_hint->flags & NETAttribDecoration) {
+//        if (net_hint->flags & AttribDecoration) {
 //          tmp->setDecoration(net_hint->decoration);
 //          fprintf(stderr,"%ul\n",net_hint->decoration);
 //        }
@@ -297,10 +297,10 @@
 }
 
 
-void WMInterface::NETNotifyStartup() {
+void WMInterface::BlackboxNotifyStartup() {
 }
 
-void WMInterface::NETNotifyWindowAdd(Window win,int desktop_nr) {
+void WMInterface::BlackboxNotifyWindowAdd(Window win,int desktop_nr) {
   WindowList *tmp = new WindowList;
   tmp->win= win;
   int status=bbtool->getWindowGeometry(tmp);
@@ -315,32 +315,40 @@
     if (tmp->desktop_nr>=0) {
       bbtool->addFrameWindow(tmp,0,False);
       bbtool->windowList->insert(tmp);
-      if (getAttributes(tmp->win)&NETAttribOmnipresent)
+      if (getAttributes(tmp->win)&AttribOmnipresent)
         addSticky(tmp);
     }
     else delete tmp;
   } else delete tmp;
 }
 
-void WMInterface::NETNotifyDel(Window win) {
+void WMInterface::BlackboxNotifyDel(Window win) {
   bbtool->removeWindow(win);
 }
 
-void WMInterface::NETNotifyAttributes(Window win) {
+void WMInterface::BlackboxNotifyAttributes(Window win) {
   windowAttributeChange(win);
 }
 
-void WMInterface::NETNotifyFocus(Window win) {
+void WMInterface::BlackboxNotifyFocus(Window win) {
   if (bbtool->getResource()->getFocusStyle()!=none)
    bbtool->focusWindow(win);
 }
 
-void WMInterface::NETNotifyCurrentWorkspace(int current_desktop) {
+void WMInterface::BlackboxNotifyCurrentWorkspace(int current_desktop) {
   bbtool->desktopChange(current_desktop);
 //      bbtool->redraw=True;
 }
 
-void WMInterface::NETNotifyWorkspaceCount(int number_of_desktops) {
+void WMInterface::BlackboxNotifyWindowRaise(Window win) {
+  bbtool->raiseWindow(win);
+}
+
+void WMInterface::BlackboxNotifyWindowLower(Window win) {
+  bbtool->lowerWindow(win);
+}
+
+void WMInterface::BlackboxNotifyWorkspaceCount(int number_of_desktops) {
   int old_number_of_desktops = bbtool->getNumberOfDesktops();
   bbtool->setNumberOfDesktops(number_of_desktops);
   if (number_of_desktops>old_number_of_desktops) {
diff -urN bbpager-0.2.7-alpha/wminterface.hh bbpager-0.2.7-alpha-nyz/wminterface.hh
--- bbpager-0.2.7-alpha/wminterface.hh	Tue Dec  7 13:44:23 1999
+++ bbpager-0.2.7-alpha-nyz/wminterface.hh	Mon May  8 00:15:34 2000
@@ -33,7 +33,7 @@
 struct WindowList;
 
 
-class WMInterface : public NETInterface {
+class WMInterface : public BlackboxInterface {
 
 public:
   WMInterface(ToolWindow *);
@@ -67,13 +67,15 @@
   Atom getKWMModuleWinRaise(void) { return kwm_module_win_raise; }
   Atom getKWMModuleWinLower(void) { return kwm_module_win_lower; }*/
  protected:
-    virtual void NETNotifyStartup(void);
-    virtual void NETNotifyWindowAdd(Window,int);
-    virtual void NETNotifyDel(Window);
-    virtual void NETNotifyAttributes(Window);
-    virtual void NETNotifyFocus(Window);
-    virtual void NETNotifyCurrentWorkspace(int);
-    virtual void NETNotifyWorkspaceCount(int);
+    virtual void BlackboxNotifyStartup(void);
+    virtual void BlackboxNotifyWindowAdd(Window,int);
+    virtual void BlackboxNotifyDel(Window);
+    virtual void BlackboxNotifyAttributes(Window);
+    virtual void BlackboxNotifyFocus(Window);
+    virtual void BlackboxNotifyCurrentWorkspace(int);
+    virtual void BlackboxNotifyWorkspaceCount(int);
+    virtual void BlackboxNotifyWindowRaise(Window);
+    virtual void BlackboxNotifyWindowLower(Window);
 
 private:
   void sendClientMessage(Atom, XID);
